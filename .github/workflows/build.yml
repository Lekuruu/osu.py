name: Build

on:
  release:
    types: [published]
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"

env:
  PROJECT_NAME: osu

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 9
          submodules: false

      - name: Use Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v1
        id: depcache
        with:
          path: deps
          key: requirements-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}

      - name: Download dependencies
        if: steps.depcache.outputs.cache-hit != 'true'
        run: |
          pip download --dest=deps -r requirements.txt

      - name: Install dependencies
        run: |
          pip install -U --no-index --find-links=deps deps/*

      - name: Run linters
        run: |
          echo "Running linters"

          pip install black
          black --check . 2>&1

      - name: Install distribution dependencies
        run: |
          rm -rf junit
          rm -rf deps
          pip install build
        if: matrix.python-version == 3.11

      - name: Create distribution package
        run: |
          echo "include requirements.txt" > MANIFEST.in
          python -m build
        if: matrix.python-version == 3.11

      - name: Upload distribution package
        uses: actions/upload-artifact@master
        with:
          name: dist
          path: dist
        if: matrix.python-version == 3.11

      - name: Run test script
        run: |
          python test.py

  build:
    runs-on: ubuntu-latest
    needs: check
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4

      - name: Use Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install setuptools

      - name: Create local build
        run: |
          python setup.py build

      - name: Upload distribution folder
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build

  publish:
    runs-on: ubuntu-latest
    needs: [check, build]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4

      - name: Use Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install build

      - name: Create local build
        run: |
          python -m build --sdist

      - name: Create wheel
        run: |
          python -m build --wheel

      - name: Install dependencies
        run: |
          pip install twine

      - name: Publish distribution to PyPI
        run: |
          twine upload -r pypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}
